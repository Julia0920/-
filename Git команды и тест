Полезные ссылки, где изучать Git:
https://githowto.com/ru  - это интерактивный тур, который познакомит вас с основами Git 
https://proglib.io/p/git-cheatsheet - шпоргалка по Git
https://learngitbranching.js.org - изуальная “игра” в  Git
https://try.github.io/ - pесурсы для изучения Git
https://javarush.ru/groups/posts/2683-nachalo-rabotih-s-git-podrobnihy-gayd-dlja-novichkov - начало работы с Git: подробный гайд для новичков

Команды Git:
git branch - создание новой ветки (branch - ветка); master - целевая ветка проекта, ветка по умолчанию (эталонна, master ломать нельзя, она установлена на боевых серверах и с ней работает конечный пользователь); develop - идентична master, ветка разработки; release -  ветка с вашим обновлением, которое вы будете устанавливать на боевые сервера
git clone - клонирование своего проекта с сервера Git в свой локальный репозиторий (на свой ПК)
git checkout - выбор активной ветки, той с которой хотите в данный момент работать ( по умолчанию активная ветка master)
git pull - обновление локальной папки с проектом, загрузка всех изменений с Git на свой ПК, включая новые ветки коллег и новую версию master
git commit - сохранение. Если работа идет с консольной версией Git, то перед сохранением надо сделать индексирование (отметка об изменениях которые мы хотим сохранить) с помощью команды git add. Если сохранение (commit) будет без индексирования (add), то в репозиторий Git отправится предыдущая сохраненная версия, а текущие изменения не сохранятся.
git push (противоположная pull) - загрузка изменений с локальной машины в удаленный репозиторий (на сервер Git). Отправляются только те изменения, которые сохранены при помощи commit, если сохранений (commit) не было, то ничего не произойдет.
git merge - слияние изменений из разных веток в единое целое
отправлять (push) и получать (pull) изменения в/из удаленного (remote) репозитория.

Тест:
Напишите команду, которая создаст пустой Git-репозиторий: git init
Напишите команду, которая проверит состояние локального репозитория: git status
Напишите команду, которая создаст в локальном репозитории ветку Test и одновременно переключится на нее: git checkout -b Test
Напишите команду, которая проиндексирует только файл test.cs: git add test.cs
Напишите команду, которая покажет изменения проиндексированных файлов: git diff --staged или git diff --cached
Напишите команду, которая зафиксирует изменения в локальном репозитории с комментарием Just for Test: git commit -m "Just for Test"
Локальная ветка называется Test_1. Напишите команду, которая отправит зафиксированные изменения на удаленный репозиторий origin, создав при этом в нем ветку Test_2: git push origin Test_1:Test_2
Напишите команду, которая удалит ветку Test_1 в локальном репозитории: git branch -d Test_1
Напишите команду, которая удалит ветку Test_2 в удаленном репозитории origin: git push origin --delete Test_2
